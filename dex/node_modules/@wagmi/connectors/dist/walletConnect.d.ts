import * as _walletconnect_universal_provider from '@walletconnect/universal-provider';
import { UniversalProvider as UniversalProvider$1, UniversalProviderOpts } from '@walletconnect/universal-provider';
import { Chain } from '@wagmi/core';
import WalletConnectProvider from '@walletconnect/ethereum-provider';
import { providers } from 'ethers';
import { C as Connector } from './base-6b5431a5.js';
import '@wagmi/core/chains';
import 'abitype';
import 'eventemitter3';

declare type UniversalProvider = InstanceType<typeof UniversalProvider$1>;
declare type WalletConnectOptions = {
    /** When `true`, uses default WalletConnect QR Code modal */
    qrcode?: boolean;
} & (({
    version?: '1';
} & ConstructorParameters<typeof WalletConnectProvider>[0]) | ({
    /**
     * Project ID associated with [WalletConnect account](https://cloud.walletconnect.com)
     */
    projectId: NonNullable<UniversalProviderOpts['projectId']>;
    version: '2';
} & Omit<UniversalProviderOpts, 'projectId'>));
declare type WalletConnectSigner = providers.JsonRpcSigner;
declare class WalletConnectConnector extends Connector<WalletConnectProvider | UniversalProvider, WalletConnectOptions, WalletConnectSigner> {
    #private;
    readonly id = "walletConnect";
    readonly name = "WalletConnect";
    readonly ready = true;
    constructor(config: {
        chains?: Chain[];
        options: WalletConnectOptions;
    });
    get isQrCode(): boolean;
    get namespacedChains(): string[];
    get version(): "1" | "2" | undefined;
    connect({ chainId }?: {
        chainId?: number;
    }): Promise<{
        account: `0x${string}`;
        chain: {
            id: number;
            unsupported: boolean;
        };
        provider: providers.Web3Provider;
    }>;
    disconnect(): Promise<void>;
    getAccount(): Promise<`0x${string}`>;
    getChainId(): Promise<number>;
    getProvider({ chainId, create, }?: {
        chainId?: number;
        create?: boolean;
    }): Promise<_walletconnect_universal_provider.default | WalletConnectProvider>;
    getSigner({ chainId }?: {
        chainId?: number;
    }): Promise<providers.JsonRpcSigner>;
    isAuthorized(): Promise<boolean>;
    protected onAccountsChanged: (accounts: string[]) => void;
    protected onChainChanged: (chainId: number | string) => void;
    protected onDisconnect: () => void;
    protected onDisplayUri: (uri: string) => void;
}

export { WalletConnectConnector };
