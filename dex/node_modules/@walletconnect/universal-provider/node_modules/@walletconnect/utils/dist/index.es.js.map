{"version":3,"file":"index.es.js","sources":["../src/caip.ts","../src/crypto.ts","../src/misc.ts","../src/relay.ts","../src/uri.ts","../src/namespaces.ts","../src/errors.ts","../src/validators.ts"],"sourcesContent":["import { SessionTypes, ProposalTypes } from \"@walletconnect/types\";\n\ninterface ChainIdParams {\n  namespace: string;\n  reference: string;\n}\n\ninterface AccountIdParams extends ChainIdParams {\n  address: string;\n}\n\nconst CAIP_DELIMITER = \":\";\n\nexport function parseChainId(chain: string): ChainIdParams {\n  const [namespace, reference] = chain.split(CAIP_DELIMITER);\n  return { namespace, reference };\n}\n\nexport function formatChainId(params: ChainIdParams): string {\n  const { namespace, reference } = params;\n  return [namespace, reference].join(CAIP_DELIMITER);\n}\n\nexport function parseAccountId(account: string): AccountIdParams {\n  const [namespace, reference, address] = account.split(CAIP_DELIMITER);\n  return { namespace, reference, address };\n}\n\nexport function formatAccountId(params: AccountIdParams): string {\n  const { namespace, reference, address } = params;\n  return [namespace, reference, address].join(CAIP_DELIMITER);\n}\n\nexport function getUniqueValues(array: string[], parser: (str: string) => string): string[] {\n  const unique: string[] = [];\n  array.forEach((str) => {\n    const value = parser(str);\n    if (!unique.includes(value)) unique.push(value);\n  });\n  return unique;\n}\n\nexport function getAddressFromAccount(account: string) {\n  const { address } = parseAccountId(account);\n  return address;\n}\n\nexport function getChainFromAccount(account: string) {\n  const { namespace, reference } = parseAccountId(account);\n  const chain = formatChainId({ namespace, reference });\n  return chain;\n}\n\nexport function formatAccountWithChain(address: string, chain: string) {\n  const { namespace, reference } = parseChainId(chain);\n  const account = formatAccountId({ namespace, reference, address });\n  return account;\n}\n\nexport function getAddressesFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getAddressFromAccount);\n}\n\nexport function getChainsFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getChainFromAccount);\n}\n\nexport function getAccountsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const accounts: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    accounts.push(...ns.accounts);\n  });\n  return accounts;\n}\n\nexport function getChainsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    chains.push(...getChainsFromAccounts(ns.accounts));\n  });\n  return chains;\n}\n\nexport function getChainsFromRequiredNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(requiredNamespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = requiredNamespaces[key];\n    chains.push(...ns.chains);\n  });\n  return chains;\n}\n","import { ChaCha20Poly1305 } from \"@stablelib/chacha20poly1305\";\nimport { HKDF } from \"@stablelib/hkdf\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { hash, SHA256 } from \"@stablelib/sha256\";\nimport * as x25519 from \"@stablelib/x25519\";\nimport { CryptoTypes } from \"@walletconnect/types\";\nimport { concat, fromString, toString } from \"uint8arrays\";\n\nexport const BASE10 = \"base10\";\nexport const BASE16 = \"base16\";\nexport const BASE64 = \"base64pad\";\nexport const UTF8 = \"utf8\";\n\nexport const TYPE_0 = 0;\nexport const TYPE_1 = 1;\n\nconst ZERO_INDEX = 0;\nconst TYPE_LENGTH = 1;\nconst IV_LENGTH = 12;\nconst KEY_LENGTH = 32;\n\nexport function generateKeyPair(): CryptoTypes.KeyPair {\n  const keyPair = x25519.generateKeyPair();\n  return {\n    privateKey: toString(keyPair.secretKey, BASE16),\n    publicKey: toString(keyPair.publicKey, BASE16),\n  };\n}\n\nexport function generateRandomBytes32(): string {\n  const random = randomBytes(KEY_LENGTH);\n  return toString(random, BASE16);\n}\n\nexport function deriveSymKey(privateKeyA: string, publicKeyB: string): string {\n  const sharedKey = x25519.sharedKey(\n    fromString(privateKeyA, BASE16),\n    fromString(publicKeyB, BASE16),\n  );\n  const hkdf = new HKDF(SHA256, sharedKey);\n  const symKey = hkdf.expand(KEY_LENGTH);\n  return toString(symKey, BASE16);\n}\n\nexport function hashKey(key: string): string {\n  const result = hash(fromString(key, BASE16));\n  return toString(result, BASE16);\n}\n\nexport function hashMessage(message: string): string {\n  const result = hash(fromString(message, UTF8));\n  return toString(result, BASE16);\n}\n\nexport function encodeTypeByte(type: number): Uint8Array {\n  return fromString(`${type}`, BASE10);\n}\n\nexport function decodeTypeByte(byte: Uint8Array): number {\n  return Number(toString(byte, BASE10));\n}\n\nexport function encrypt(params: CryptoTypes.EncryptParams): string {\n  const type = encodeTypeByte(typeof params.type !== \"undefined\" ? params.type : TYPE_0);\n  if (decodeTypeByte(type) === TYPE_1 && typeof params.senderPublicKey === \"undefined\") {\n    throw new Error(\"Missing sender public key for type 1 envelope\");\n  }\n  const senderPublicKey =\n    typeof params.senderPublicKey !== \"undefined\"\n      ? fromString(params.senderPublicKey, BASE16)\n      : undefined;\n\n  const iv =\n    typeof params.iv !== \"undefined\" ? fromString(params.iv, BASE16) : randomBytes(IV_LENGTH);\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const sealed = box.seal(iv, fromString(params.message, UTF8));\n  return serialize({ type, sealed, iv, senderPublicKey });\n}\n\nexport function decrypt(params: CryptoTypes.DecryptParams): string {\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const { sealed, iv } = deserialize(params.encoded);\n  const message = box.open(iv, sealed);\n  if (message === null) throw new Error(\"Failed to decrypt\");\n  return toString(message, UTF8);\n}\n\nexport function serialize(params: CryptoTypes.EncodingParams): string {\n  if (decodeTypeByte(params.type) === TYPE_1) {\n    if (typeof params.senderPublicKey === \"undefined\") {\n      throw new Error(\"Missing sender public key for type 1 envelope\");\n    }\n    return toString(\n      concat([params.type, params.senderPublicKey, params.iv, params.sealed]),\n      BASE64,\n    );\n  }\n  // default to type 0 envelope\n  return toString(concat([params.type, params.iv, params.sealed]), BASE64);\n}\n\nexport function deserialize(encoded: string): CryptoTypes.EncodingParams {\n  const bytes = fromString(encoded, BASE64);\n  const type = bytes.slice(ZERO_INDEX, TYPE_LENGTH);\n  const slice1 = TYPE_LENGTH;\n  if (decodeTypeByte(type) === TYPE_1) {\n    const slice2 = slice1 + KEY_LENGTH;\n    const slice3 = slice2 + IV_LENGTH;\n    const senderPublicKey = bytes.slice(slice1, slice2);\n    const iv = bytes.slice(slice2, slice3);\n    const sealed = bytes.slice(slice3);\n    return { type, sealed, iv, senderPublicKey };\n  }\n  // default to type 0 envelope\n  const slice2 = slice1 + IV_LENGTH;\n  const iv = bytes.slice(slice1, slice2);\n  const sealed = bytes.slice(slice2);\n  return { type, sealed, iv };\n}\n\nexport function validateDecoding(\n  encoded: string,\n  opts?: CryptoTypes.DecodeOptions,\n): CryptoTypes.EncodingValidation {\n  const deserialized = deserialize(encoded);\n  return validateEncoding({\n    type: decodeTypeByte(deserialized.type),\n    senderPublicKey:\n      typeof deserialized.senderPublicKey !== \"undefined\"\n        ? toString(deserialized.senderPublicKey, BASE16)\n        : undefined,\n    receiverPublicKey: opts?.receiverPublicKey,\n  });\n}\n\nexport function validateEncoding(opts?: CryptoTypes.EncodeOptions): CryptoTypes.EncodingValidation {\n  const type = opts?.type || TYPE_0;\n  if (type === TYPE_1) {\n    if (typeof opts?.senderPublicKey === \"undefined\") {\n      throw new Error(\"missing sender public key\");\n    }\n    if (typeof opts?.receiverPublicKey === \"undefined\") {\n      throw new Error(\"missing receiver public key\");\n    }\n  }\n  return {\n    type,\n    senderPublicKey: opts?.senderPublicKey,\n    receiverPublicKey: opts?.receiverPublicKey,\n  };\n}\n\nexport function isTypeOneEnvelope(\n  result: CryptoTypes.EncodingValidation,\n): result is CryptoTypes.TypeOneParams {\n  return (\n    result.type === TYPE_1 &&\n    typeof result.senderPublicKey === \"string\" &&\n    typeof result.receiverPublicKey === \"string\"\n  );\n}\n","import { detect } from \"detect-browser\";\nimport { FIVE_MINUTES, fromMiliseconds, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  SignClientTypes,\n  RelayerClientMetadata,\n  EngineTypes,\n  RelayerTypes,\n} from \"@walletconnect/types\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-utils\";\nimport * as qs from \"query-string\";\n\n// -- constants -----------------------------------------//\n\nexport const REACT_NATIVE_PRODUCT = \"ReactNative\";\n\nexport const ENV_MAP = {\n  reactNative: \"react-native\",\n  node: \"node\",\n  browser: \"browser\",\n  unknown: \"unknown\",\n};\n\nexport const EMPTY_SPACE = \" \";\n\nexport const COLON = \":\";\n\nexport const SLASH = \"/\";\n\nexport const DEFAULT_DEPTH = 2;\n\nexport const ONE_THOUSAND = 1000;\n\nexport const SDK_TYPE = \"js\";\n\n// -- env -----------------------------------------------//\n\nexport function isNode(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\"\n  );\n}\n\nexport function isReactNative(): boolean {\n  return !getDocument() && !!getNavigator() && navigator.product === REACT_NATIVE_PRODUCT;\n}\n\nexport function isBrowser(): boolean {\n  return !isNode() && !!getNavigator();\n}\n\nexport function getEnvironment(): string {\n  if (isReactNative()) return ENV_MAP.reactNative;\n  if (isNode()) return ENV_MAP.node;\n  if (isBrowser()) return ENV_MAP.browser;\n  return ENV_MAP.unknown;\n}\n\n// -- query -----------------------------------------------//\n\nexport function appendToQueryString(queryString: string, newQueryParams: any): string {\n  let queryParams = qs.parse(queryString);\n\n  queryParams = { ...queryParams, ...newQueryParams };\n\n  queryString = qs.stringify(queryParams);\n\n  return queryString;\n}\n\n// -- metadata ----------------------------------------------//\n\nexport function getAppMetadata(): SignClientTypes.Metadata {\n  return (\n    getWindowMetadata() || {\n      name: \"\",\n      description: \"\",\n      url: \"\",\n      icons: [\"\"],\n    }\n  );\n}\n\nexport function getRelayClientMetadata(protocol: string, version: number): RelayerClientMetadata {\n  const env = getEnvironment();\n\n  const metadata: RelayerClientMetadata = { protocol, version, env };\n  if (env === \"browser\") {\n    metadata.host = getLocation()?.host || \"unknown\";\n  }\n  return metadata;\n}\n\n// -- rpcUrl ----------------------------------------------//\n\nexport function getJavascriptOS() {\n  const info = detect();\n  if (info === null) return \"unknown\";\n  const os = info.os ? info.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n  if (info.type === \"browser\") {\n    return [os, info.name, info.version].join(\"-\");\n  }\n  return [os, info.version].join(\"-\");\n}\n\nexport function getJavascriptID() {\n  const env = getEnvironment();\n  return env === ENV_MAP.browser ? [env, getLocation()?.host || \"unknown\"].join(\":\") : env;\n}\n\nexport function formatUA(protocol: string, version: number, sdkVersion: string) {\n  const os = getJavascriptOS();\n  const id = getJavascriptID();\n  return [[protocol, version].join(\"-\"), [SDK_TYPE, sdkVersion].join(\"-\"), os, id].join(\"/\");\n}\nconsole;\n\nexport function formatRelayRpcUrl({\n  protocol,\n  version,\n  relayUrl,\n  sdkVersion,\n  auth,\n  projectId,\n}: RelayerTypes.RpcUrlParams) {\n  const splitUrl = relayUrl.split(\"?\");\n  const ua = formatUA(protocol, version, sdkVersion);\n  const params = { auth, ua, projectId };\n  const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n  return splitUrl[0] + \"?\" + queryString;\n}\n\nexport function getHttpUrl(url: string) {\n  // regex from https://stackoverflow.com/questions/3883871/regexp-to-grab-protocol-from-url\n  const matches = url.match(/^[^:]+(?=:\\/\\/)/gi) || [];\n  let protocol = matches[0];\n  const domain = typeof protocol !== \"undefined\" ? url.split(\"://\")[1] : url;\n  protocol = protocol === \"wss\" ? \"https\" : \"http\";\n  return [protocol, domain].join(\"://\");\n}\n\n// -- assert ------------------------------------------------- //\n\nexport function assertType(obj: any, key: string, type: string) {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\n// -- context ------------------------------------------------- //\n\nexport function parseContextNames(context: string, depth = DEFAULT_DEPTH) {\n  return getLastItems(context.split(SLASH), depth);\n}\n\nexport function formatMessageContext(context: string): string {\n  return parseContextNames(context).join(EMPTY_SPACE);\n}\n\n// -- array ------------------------------------------------- //\n\nexport function hasOverlap(a: any[], b: any[]): boolean {\n  const matches = a.filter((x) => b.includes(x));\n  return matches.length === a.length;\n}\n\nexport function getLastItems(arr: any[], depth = DEFAULT_DEPTH): any[] {\n  return arr.slice(Math.max(arr.length - depth, 0));\n}\n\n// -- map ------------------------------------------------- //\n\nexport function mapToObj<T = any>(map: Map<string, T>): Record<string, T> {\n  return Object.fromEntries(map.entries());\n}\n\nexport function objToMap<T = any>(obj: Record<string, T>): Map<string, T> {\n  return new Map<string, T>(Object.entries<T>(obj));\n}\n\nexport function mapEntries<A = any, B = any>(\n  obj: Record<string, A>,\n  cb: (x: A) => B,\n): Record<string, B> {\n  const res = {};\n  Object.keys(obj).forEach((key) => {\n    res[key] = cb(obj[key]);\n  });\n  return res;\n}\n\n// -- enum ------------------------------------------------- //\n\n// source: https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275\nexport const enumify = <T extends { [index: string]: U }, U extends string>(x: T): T => x;\n\n// -- string ------------------------------------------------- //\n\nexport function capitalizeWord(word: string) {\n  return word.trim().replace(/^\\w/, (c) => c.toUpperCase());\n}\n\nexport function capitalize(str: string) {\n  return str\n    .split(EMPTY_SPACE)\n    .map((w) => capitalizeWord(w))\n    .join(EMPTY_SPACE);\n}\n\n// -- time ------------------------------------------------- //\n\nexport function calcExpiry(ttl: number, now?: number): number {\n  return fromMiliseconds((now || Date.now()) + toMiliseconds(ttl));\n}\n\nexport function isExpired(expiry: number) {\n  return fromMiliseconds(Date.now()) >= toMiliseconds(expiry);\n}\n\n// -- promises --------------------------------------------- //\nexport function createDelayedPromise<T>(expiry?: number | undefined) {\n  const timeout = toMiliseconds(expiry || FIVE_MINUTES);\n  let cacheResolve: undefined | ((value: T | PromiseLike<T>) => void);\n  let cacheReject: undefined | ((value?: ErrorResponse) => void);\n  let cacheTimeout: undefined | NodeJS.Timeout;\n\n  const done = () =>\n    new Promise<T>((promiseResolve, promiseReject) => {\n      cacheTimeout = setTimeout(promiseReject, timeout);\n      cacheResolve = promiseResolve;\n      cacheReject = promiseReject;\n    });\n  const resolve = (value?: T) => {\n    if (cacheTimeout && cacheResolve) {\n      clearTimeout(cacheTimeout);\n      cacheResolve(value as T);\n    }\n  };\n  const reject = (value?: ErrorResponse) => {\n    if (cacheTimeout && cacheReject) {\n      clearTimeout(cacheTimeout);\n      cacheReject(value);\n    }\n  };\n\n  return {\n    resolve,\n    reject,\n    done,\n  };\n}\n\nexport function createExpiringPromise<T>(promise: Promise<T>, expiry: number) {\n  return new Promise(async (resolve, reject) => {\n    const timeout = setTimeout(() => reject(), expiry);\n    const res = await promise;\n    clearTimeout(timeout);\n    resolve(res);\n  });\n}\n\n// -- expirer --------------------------------------------- //\n\nexport function formatExpirerTarget(type: \"topic\" | \"id\", value: string | number): string {\n  if (typeof value === \"string\" && value.startsWith(`${type}:`)) return value;\n  if (type.toLowerCase() === \"topic\") {\n    if (typeof value !== \"string\")\n      throw new Error(`Value must be \"string\" for expirer target type: topic`);\n    return `topic:${value}`;\n  } else if (type.toLowerCase() === \"id\") {\n    if (typeof value !== \"number\")\n      throw new Error(`Value must be \"number\" for expirer target type: id`);\n    return `id:${value}`;\n  }\n  throw new Error(`Unknown expirer target type: ${type}`);\n}\n\nexport function formatTopicTarget(topic: string): string {\n  return formatExpirerTarget(\"topic\", topic);\n}\n\nexport function formatIdTarget(id: number): string {\n  return formatExpirerTarget(\"id\", id);\n}\n\nexport function parseExpirerTarget(target: string) {\n  const [type, value] = target.split(\":\");\n  const parsed: { id?: number; topic?: string } = { id: undefined, topic: undefined };\n  if (type === \"topic\" && typeof value === \"string\") {\n    parsed.topic = value;\n  } else if (type === \"id\" && Number.isInteger(Number(value))) {\n    parsed.id = Number(value);\n  } else {\n    throw new Error(`Invalid target, expected id:number or topic:string, got ${type}:${value}`);\n  }\n\n  return parsed;\n}\n\n// -- events ---------------------------------------------- //\n\nexport function engineEvent(event: EngineTypes.Event, id?: number | string | undefined) {\n  return `${event}${id ? `:${id}` : \"\"}`;\n}\n","import { RELAY_JSONRPC } from \"@walletconnect/relay-api\";\nimport { RelayerTypes } from \"@walletconnect/types\";\n\nexport const RELAYER_DEFAULT_PROTOCOL = \"irn\";\n\nexport function getRelayProtocolName(\n  opts?: RelayerTypes.RequestOptions,\n): RelayerTypes.ProtocolOptions {\n  return opts?.relay || { protocol: RELAYER_DEFAULT_PROTOCOL };\n}\n\nexport function getRelayProtocolApi(protocol: string) {\n  const jsonrpc = RELAY_JSONRPC[protocol];\n  if (typeof jsonrpc === \"undefined\") {\n    throw new Error(`Relay Protocol not supported: ${protocol}`);\n  }\n  return jsonrpc;\n}\n","import * as qs from \"query-string\";\nimport { EngineTypes, RelayerTypes } from \"@walletconnect/types\";\n\n// -- uri -------------------------------------------------- //\n\nexport function parseRelayParams(params: any, delimiter = \"-\"): RelayerTypes.ProtocolOptions {\n  const relay: any = {};\n  const prefix = \"relay\" + delimiter;\n  Object.keys(params).forEach((key) => {\n    if (key.startsWith(prefix)) {\n      const name = key.replace(prefix, \"\");\n      const value = params[key];\n      relay[name] = value;\n    }\n  });\n  return relay;\n}\n\nexport function parseUri(str: string): EngineTypes.UriParameters {\n  const pathStart: number = str.indexOf(\":\");\n  const pathEnd: number | undefined = str.indexOf(\"?\") !== -1 ? str.indexOf(\"?\") : undefined;\n  const protocol: string = str.substring(0, pathStart);\n  const path: string = str.substring(pathStart + 1, pathEnd);\n  const requiredValues = path.split(\"@\");\n  const queryString: string = typeof pathEnd !== \"undefined\" ? str.substring(pathEnd) : \"\";\n  const queryParams = qs.parse(queryString);\n  const result = {\n    protocol,\n    topic: requiredValues[0],\n    version: parseInt(requiredValues[1], 10),\n    symKey: queryParams.symKey as string,\n    relay: parseRelayParams(queryParams),\n  };\n  return result;\n}\n\nexport function formatRelayParams(relay: RelayerTypes.ProtocolOptions, delimiter = \"-\") {\n  const prefix = \"relay\";\n  const params: any = {};\n  Object.keys(relay).forEach((key) => {\n    const k = prefix + delimiter + key;\n    if (relay[key]) {\n      params[k] = relay[key];\n    }\n  });\n  return params;\n}\n\nexport function formatUri(params: EngineTypes.UriParameters): string {\n  return (\n    `${params.protocol}:${params.topic}@${params.version}?` +\n    qs.stringify({\n      symKey: params.symKey,\n      ...formatRelayParams(params.relay),\n    })\n  );\n}\n","import { ProposalTypes, SessionTypes } from \"@walletconnect/types\";\nimport { isValidNamespaces } from \"./validators\";\n\nexport function getAccountsChains(accounts: SessionTypes.Namespace[\"accounts\"]) {\n  const chains: string[] = [];\n  accounts.forEach((account) => {\n    const [chain, chainId] = account.split(\":\");\n    chains.push(`${chain}:${chainId}`);\n  });\n\n  return chains;\n}\n\nexport function getNamespacesChains(namespaces: SessionTypes.Namespaces) {\n  const chains: string[] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    chains.push(...getAccountsChains(namespace.accounts));\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        chains.push(...getAccountsChains(extension.accounts));\n      });\n    }\n  });\n\n  return chains;\n}\n\nexport function getNamespacesMethodsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const methods: SessionTypes.Namespace[\"methods\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) methods.push(...namespace.methods);\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        const extensionChains = getAccountsChains(extension.accounts);\n        if (extensionChains.includes(chainId)) methods.push(...extension.methods);\n      });\n    }\n  });\n\n  return methods;\n}\n\nexport function getNamespacesEventsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const events: SessionTypes.Namespace[\"events\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) events.push(...namespace.events);\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        const extensionChains = getAccountsChains(extension.accounts);\n        if (extensionChains.includes(chainId)) events.push(...extension.events);\n      });\n    }\n  });\n\n  return events;\n}\n\nexport function getRequiredNamespacesFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  caller: string,\n): ProposalTypes.RequiredNamespaces {\n  const validNamespacesError = isValidNamespaces(namespaces, caller);\n  if (validNamespacesError) throw new Error(validNamespacesError.message);\n\n  const required = {};\n  for (const [namespace, values] of Object.entries(namespaces)) {\n    required[namespace] = {\n      methods: values.methods,\n      events: values.events,\n      chains: values.accounts.map((account) => `${account.split(\":\")[0]}:${account.split(\":\")[1]}`),\n    };\n  }\n  return required;\n}\n","/**\n * Types\n */\ntype SdkErrorKey = keyof typeof SDK_ERRORS;\ntype InternalErrorKey = keyof typeof INTERNAL_ERRORS;\n\n/**\n * Constants\n */\nconst SDK_ERRORS = {\n  /* ----- INVALID (1xxx) ----- */\n  INVALID_METHOD: {\n    message: \"Invalid method.\",\n    code: 1001,\n  },\n  INVALID_EVENT: {\n    message: \"Invalid event.\",\n    code: 1002,\n  },\n  INVALID_UPDATE_REQUEST: {\n    message: \"Invalid update request.\",\n    code: 1003,\n  },\n  INVALID_EXTEND_REQUEST: {\n    message: \"Invalid extend request.\",\n    code: 1004,\n  },\n  INVALID_SESSION_SETTLE_REQUEST: {\n    message: \"Invalid session settle request.\",\n    code: 1005,\n  },\n  /* ----- UNAUTHORIZED (3xxx) ----- */\n  UNAUTHORIZED_METHOD: {\n    message: \"Unauthorized method.\",\n    code: 3001,\n  },\n  UNAUTHORIZED_EVENT: {\n    message: \"Unauthorized event.\",\n    code: 3002,\n  },\n  UNAUTHORIZED_UPDATE_REQUEST: {\n    message: \"Unauthorized update request.\",\n    code: 3003,\n  },\n  UNAUTHORIZED_EXTEND_REQUEST: {\n    message: \"Unauthorized extend request.\",\n    code: 3004,\n  },\n  /* ----- REJECTED (5xxx) ----- */\n  USER_REJECTED: {\n    message: \"User rejected.\",\n    code: 5000,\n  },\n  USER_REJECTED_CHAINS: {\n    message: \"User rejected chains.\",\n    code: 5001,\n  },\n  USER_REJECTED_METHODS: {\n    message: \"User rejected methods.\",\n    code: 5002,\n  },\n  USER_REJECTED_EVENTS: {\n    message: \"User rejected events.\",\n    code: 5003,\n  },\n  UNSUPPORTED_CHAINS: {\n    message: \"Unsupported chains.\",\n    code: 5100,\n  },\n  UNSUPPORTED_METHODS: {\n    message: \"Unsupported methods.\",\n    code: 5101,\n  },\n  UNSUPPORTED_EVENTS: {\n    message: \"Unsupported events.\",\n    code: 5102,\n  },\n  UNSUPPORTED_ACCOUNTS: {\n    message: \"Unsupported accounts.\",\n    code: 5103,\n  },\n  UNSUPPORTED_NAMESPACE_KEY: {\n    message: \"Unsupported namespace key.\",\n    code: 5104,\n  },\n  /* ----- REASON (6xxx) ----- */\n  USER_DISCONNECTED: {\n    message: \"User disconnected.\",\n    code: 6000,\n  },\n  /* ----- FAILURE (7xxx) ----- */\n  SESSION_SETTLEMENT_FAILED: {\n    message: \"Session settlement failed.\",\n    code: 7000,\n  },\n  /* ----- PAIRING (10xxx) ----- */\n  WC_METHOD_UNSUPPORTED: {\n    message: \"Unsupported wc_ method.\",\n    code: 10001,\n  },\n};\n\nconst INTERNAL_ERRORS = {\n  NOT_INITIALIZED: {\n    message: \"Not initialized.\",\n    code: 1,\n  },\n  NO_MATCHING_KEY: {\n    message: \"No matching key.\",\n    code: 2,\n  },\n  RESTORE_WILL_OVERRIDE: {\n    message: \"Restore will override.\",\n    code: 3,\n  },\n  RESUBSCRIBED: {\n    message: \"Resubscribed.\",\n    code: 4,\n  },\n  MISSING_OR_INVALID: {\n    message: \"Missing or invalid.\",\n    code: 5,\n  },\n  EXPIRED: {\n    message: \"Expired.\",\n    code: 6,\n  },\n  UNKNOWN_TYPE: {\n    message: \"Unknown type.\",\n    code: 7,\n  },\n  MISMATCHED_TOPIC: {\n    message: \"Mismatched topic.\",\n    code: 8,\n  },\n  NON_CONFORMING_NAMESPACES: {\n    message: \"Non conforming namespaces.\",\n    code: 9,\n  },\n};\n\n/**\n * Utilities\n */\nexport function getInternalError(key: InternalErrorKey, context?: string | number) {\n  const { message, code } = INTERNAL_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n\nexport function getSdkError(key: SdkErrorKey, context?: string | number) {\n  const { message, code } = SDK_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n","import { SessionTypes, ProposalTypes, RelayerTypes, EngineTypes } from \"@walletconnect/types\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\nimport {\n  getNamespacesChains,\n  getNamespacesMethodsForChainId,\n  getNamespacesEventsForChainId,\n  getAccountsChains,\n} from \"./namespaces\";\nimport { getSdkError, getInternalError } from \"./errors\";\nimport { hasOverlap } from \"./misc\";\n\nexport type ErrorObject = { message: string; code: number } | null;\n\n// -- types validation ----------------------------------------------------- //\n\nexport function isValidArray(arr: any, itemCondition?: (item: any) => boolean) {\n  if (Array.isArray(arr)) {\n    if (typeof itemCondition !== \"undefined\" && arr.length) {\n      return arr.every(itemCondition);\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isValidObject(obj: any) {\n  return Object.getPrototypeOf(obj) === Object.prototype && Object.keys(obj).length;\n}\n\nexport function isUndefined(input: any): input is undefined {\n  return typeof input === \"undefined\";\n}\n\nexport function isValidString(input: any, optional: boolean): input is string {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"string\" && Boolean(input.trim().length);\n}\n\nexport function isValidNumber(input: any, optional: boolean) {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"number\" && !isNaN(input);\n}\n\n// -- protocol validation -------------------------------------------------- //\n\nexport function isSessionCompatible(session: SessionTypes.Struct, params: EngineTypes.FindParams) {\n  const { requiredNamespaces } = params;\n  const sessionKeys = Object.keys(session.namespaces);\n  const paramsKeys = Object.keys(requiredNamespaces);\n  let compatible = true;\n\n  if (!hasOverlap(paramsKeys, sessionKeys)) return false;\n\n  sessionKeys.forEach((key) => {\n    const { accounts, methods, events, extension } = session.namespaces[key];\n    const chains = getAccountsChains(accounts);\n    const requiredNamespace = requiredNamespaces[key];\n\n    if (\n      !hasOverlap(requiredNamespace.chains, chains) ||\n      !hasOverlap(requiredNamespace.methods, methods) ||\n      !hasOverlap(requiredNamespace.events, events)\n    ) {\n      compatible = false;\n    }\n\n    if (compatible && extension) {\n      extension.forEach((extensionNamespace) => {\n        const { accounts, methods, events } = extensionNamespace;\n        const chains = getAccountsChains(accounts);\n        const overlap = requiredNamespace.extension?.find(\n          (ext) =>\n            hasOverlap(ext.chains, chains) &&\n            hasOverlap(ext.methods, methods) &&\n            hasOverlap(ext.events, events),\n        );\n        if (!overlap) compatible = false;\n      });\n    }\n  });\n\n  return compatible;\n}\n\nexport function isValidChainId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    return split.length === 2;\n  }\n  return false;\n}\n\nexport function isValidAccountId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    if (split.length === 3) {\n      const chainId = split[0] + \":\" + split[1];\n      return !!split[2] && isValidChainId(chainId);\n    }\n  }\n  return false;\n}\n\nexport function isValidUrl(value: any) {\n  if (isValidString(value, false)) {\n    try {\n      const url = new URL(value);\n      return typeof url !== \"undefined\";\n    } catch (e) {\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function isProposalStruct(input: any): input is ProposalTypes.Struct {\n  return input?.proposer?.publicKey;\n}\n\nexport function isSessionStruct(input: any): input is SessionTypes.Struct {\n  return input?.topic;\n}\n\nexport function isValidController(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isValidString(input?.publicKey, false)) {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method} controller public key should be a string`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidExtension(namespace: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isUndefined(namespace?.extension)) {\n    if (!isValidArray(namespace.extension) || !namespace.extension.length) {\n      error = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `${method} extension should be an array of namespaces, or omitted`,\n      );\n    }\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceMethodsOrEvents(input: any): input is string {\n  let valid = true;\n  if (isValidArray(input)) {\n    if (input.length) {\n      valid = input.every((item: any) => isValidString(item, false));\n    }\n  } else {\n    valid = false;\n  }\n\n  return valid;\n}\n\nexport function isValidChains(key: string, chains: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(chains)) {\n    chains.forEach((chain: any) => {\n      if (error) return;\n      if (!isValidChainId(chain) || !chain.includes(key)) {\n        error = getSdkError(\n          \"UNSUPPORTED_CHAINS\",\n          `${context}, chain ${chain} should be a string and conform to \"namespace:chainId\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_CHAINS\",\n      `${context}, chains ${chains} should be an array of strings conforming to \"namespace:chainId\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceChains(namespaces: any, method: string) {\n  let error: ErrorObject = null;\n  Object.entries(namespaces).forEach(([key, namespace]: [string, any]) => {\n    if (error) return;\n    const validChainsError = isValidChains(key, namespace?.chains, `${method} requiredNamespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validChainsError) {\n      error = validChainsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validChainsError = isValidChains(key, extension.chains, `${method} extension`);\n        if (validChainsError) {\n          error = validChainsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidAccounts(accounts: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(accounts)) {\n    accounts.forEach((account: any) => {\n      if (error) return;\n      if (!isValidAccountId(account)) {\n        error = getSdkError(\n          \"UNSUPPORTED_ACCOUNTS\",\n          `${context}, account ${account} should be a string and conform to \"namespace:chainId:address\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_ACCOUNTS\",\n      `${context}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceAccounts(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validAccountsError = isValidAccounts(namespace?.accounts, `${method} namespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validAccountsError = isValidAccounts(extension.accounts, `${method} extension`);\n        if (validAccountsError) {\n          error = validAccountsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidActions(namespace: any, context: string) {\n  let error: ErrorObject = null;\n  if (!isValidNamespaceMethodsOrEvents(namespace?.methods)) {\n    error = getSdkError(\n      \"UNSUPPORTED_METHODS\",\n      `${context}, methods should be an array of strings or empty array for no methods`,\n    );\n  } else if (!isValidNamespaceMethodsOrEvents(namespace?.events)) {\n    error = getSdkError(\n      \"UNSUPPORTED_EVENTS\",\n      `${context}, events should be an array of strings or empty array for no events`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceActions(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validActionsError = isValidActions(namespace, `${method}, namespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validActionsError) {\n      error = validActionsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validActionsError = isValidActions(extension, `${method}, extension`);\n        if (validActionsError) {\n          error = validActionsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidRequiredNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validChainsError = isValidNamespaceChains(input, method);\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, requiredNamespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validAccountsError = isValidNamespaceAccounts(input, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, namespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidRelay(input: any): input is RelayerTypes.ProtocolOptions {\n  return isValidString(input.protocol, true);\n}\n\nexport function isValidRelays(\n  input: any,\n  optional: boolean,\n): input is RelayerTypes.ProtocolOptions[] {\n  let valid = false;\n\n  if (optional && !input) valid = true;\n  else if (input && isValidArray(input) && input.length) {\n    input.forEach((relay: RelayerTypes.ProtocolOptions) => {\n      valid = isValidRelay(relay);\n    });\n  }\n\n  return valid;\n}\n\nexport function isValidId(input: any) {\n  return typeof input === \"number\";\n}\n\nexport function isValidParams(input: any) {\n  return typeof input !== \"undefined\" && typeof input !== null;\n}\n\nexport function isValidErrorReason(input: any): input is ErrorResponse {\n  if (!input) return false;\n  if (typeof input !== \"object\") return false;\n  if (!input.code || !isValidNumber(input.code, false)) return false;\n  if (!input.message || !isValidString(input.message, false)) return false;\n\n  return true;\n}\n\nexport function isValidRequest(request: any) {\n  if (isUndefined(request)) return false;\n  if (!isValidString(request.method, false)) return false;\n  return true;\n}\n\nexport function isValidResponse(response: any) {\n  if (isUndefined(response)) return false;\n  if (isUndefined(response.result) && isUndefined(response.error)) return false;\n  if (!isValidNumber(response.id, false)) return false;\n  if (!isValidString(response.jsonrpc, false)) return false;\n  return true;\n}\n\nexport function isValidEvent(event: any) {\n  if (isUndefined(event)) return false;\n  if (!isValidString(event.name, false)) return false;\n  return true;\n}\n\nexport function isValidNamespacesChainId(namespaces: SessionTypes.Namespaces, chainId: string) {\n  if (!isValidChainId(chainId)) return false;\n  const chains = getNamespacesChains(namespaces);\n  if (!chains.includes(chainId)) return false;\n\n  return true;\n}\n\nexport function isValidNamespacesRequest(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  method: string,\n) {\n  if (!isValidString(method, false)) return false;\n  const methods = getNamespacesMethodsForChainId(namespaces, chainId);\n  return methods.includes(method);\n}\n\nexport function isValidNamespacesEvent(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  eventName: string,\n) {\n  if (!isValidString(eventName, false)) return false;\n  const events = getNamespacesEventsForChainId(namespaces, chainId);\n  return events.includes(eventName);\n}\n\nexport function isConformingNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  namespaces: SessionTypes.Namespaces,\n  context: string,\n) {\n  let error: ErrorObject = null;\n  const requiredNamespaceKeys = Object.keys(requiredNamespaces);\n  const namespaceKeys = Object.keys(namespaces);\n\n  if (!hasOverlap(requiredNamespaceKeys, namespaceKeys)) {\n    error = getInternalError(\n      \"NON_CONFORMING_NAMESPACES\",\n      `${context} namespaces keys don't satisfy requiredNamespaces`,\n    );\n  } else {\n    requiredNamespaceKeys.forEach((key) => {\n      if (error) return;\n\n      const requiredNamespaceChains = requiredNamespaces[key].chains;\n      const namespaceChains = getAccountsChains(namespaces[key].accounts);\n\n      if (!hasOverlap(requiredNamespaceChains, namespaceChains)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces accounts don't satisfy requiredNamespaces chains for ${key}`,\n        );\n      } else if (!hasOverlap(requiredNamespaces[key].methods, namespaces[key].methods)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces methods don't satisfy requiredNamespaces methods for ${key}`,\n        );\n      } else if (!hasOverlap(requiredNamespaces[key].events, namespaces[key].events)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces events don't satisfy requiredNamespaces events for ${key}`,\n        );\n      } else if (requiredNamespaces[key].extension && !namespaces[key].extension) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces extension doesn't satisfy requiredNamespaces extension for ${key}`,\n        );\n      } else if (requiredNamespaces[key].extension && namespaces[key].extension) {\n        requiredNamespaces[key].extension?.forEach(({ methods, events, chains }) => {\n          if (error) return;\n          const isOverlap = namespaces[key].extension?.find((namespace) => {\n            const accChains = getAccountsChains(namespace.accounts);\n            return (\n              hasOverlap(chains, accChains) &&\n              hasOverlap(events, namespace.events) &&\n              hasOverlap(methods, namespace.methods)\n            );\n          });\n\n          if (!isOverlap) {\n            error = getInternalError(\n              \"NON_CONFORMING_NAMESPACES\",\n              `${context} namespaces extension doesn't satisfy requiredNamespaces extension for ${key}`,\n            );\n          }\n        });\n      }\n    });\n  }\n\n  return error;\n}\n\nexport function isValidRequestExpiry(expiry: number, boundaries: { min: number; max: number }) {\n  return isValidNumber(expiry, false) && expiry <= boundaries.max && expiry >= boundaries.min;\n}\n"],"names":["CAIP_DELIMITER","chain","namespace","reference","params","account","address","array","parser","unique","str","value","accounts","namespaces","keys","key","ns","chains","requiredNamespaces","ZERO_INDEX","TYPE_LENGTH","IV_LENGTH","KEY_LENGTH","keyPair","x25519","toString","random","randomBytes","privateKeyA","publicKeyB","sharedKey","fromString","symKey","HKDF","SHA256","result","hash","message","type","byte","senderPublicKey","iv","sealed","ChaCha20Poly1305","box","concat","encoded","bytes","slice1","slice2","slice3","opts","deserialized","getDocument","getNavigator","queryString","newQueryParams","queryParams","qs","__spreadValues","getWindowMetadata","protocol","version","_a","env","metadata","getLocation","info","detect","os","sdkVersion","id","relayUrl","auth","projectId","splitUrl","ua","url","domain","obj","context","depth","a","b","x","arr","map","cb","res","word","c","w","ttl","now","fromMiliseconds","toMiliseconds","expiry","timeout","FIVE_MINUTES","cacheResolve","cacheReject","cacheTimeout","promiseResolve","promiseReject","promise","resolve","reject","topic","target","parsed","event","jsonrpc","RELAY_JSONRPC","delimiter","relay","prefix","name","pathStart","pathEnd","requiredValues","k","chainId","extension","methods","events","caller","validNamespacesError","isValidNamespaces","required","values","SDK_ERRORS","INTERNAL_ERRORS","code","itemCondition","input","optional","session","sessionKeys","paramsKeys","compatible","hasOverlap","getAccountsChains","requiredNamespace","extensionNamespace","ext","split","e","method","error","getInternalError","valid","item","getSdkError","validChainsError","validExtensionError","validAccountsError","validActionsError","request","response","getNamespacesChains","getNamespacesMethodsForChainId","eventName","getNamespacesEventsForChainId","requiredNamespaceKeys","namespaceKeys","requiredNamespaceChains","namespaceChains","accChains","boundaries"],"mappings":"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"}