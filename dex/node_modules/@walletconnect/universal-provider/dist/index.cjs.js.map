{"version":3,"file":"index.cjs.js","sources":["../src/utils/misc.ts","../src/providers/eip155.ts","../src/providers/solana.ts","../src/constants/values.ts","../src/UniversalProvider.ts","../src/index.ts"],"sourcesContent":["import { NamespaceConfig, Namespace } from \"../types\";\n\nexport function getChainFromNamespaces(namespaces: NamespaceConfig): [string, string] {\n  const chain = namespaces[Object.keys(namespaces)[0]]?.chains[0];\n  return [chain.split(\":\")[0], chain.split(\":\")[1]];\n}\n\nexport function getRpcUrl(chainId: string, rpc: Namespace): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getChainId([chainId])];\n  }\n  return rpcUrl;\n}\n\nexport function getChainId(chains: string[]): number {\n  return Number(chains[0].split(\":\")[1]);\n}\n","import Client from \"@walletconnect/sign-client\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\n\nimport {\n  IProvider,\n  RpcProvidersMap,\n  SubProviderOpts,\n  RequestParams,\n  SessionNamespace,\n} from \"../types\";\n\nimport { getRpcUrl } from \"../utils\";\nimport EventEmitter from \"events\";\n\nclass Eip155Provider implements IProvider {\n  public name = \"eip155\";\n  public client: Client;\n  // the active chainId on the dapp\n  public chainId: number;\n  public namespace: SessionNamespace;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.client = opts.client;\n    this.events = opts.events;\n    this.httpProviders = this.createHttpProviders();\n    this.chainId = this.getDefaultChainId();\n  }\n\n  public async request<T = unknown>(args: RequestParams): Promise<T> {\n    switch (args.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts() as any;\n      case \"eth_accounts\":\n        return this.getAccounts() as any;\n      case \"wallet_switchEthereumChain\": {\n        const newChainId = args.request.params ? args.request.params[0]?.chainId : \"0x0\";\n        this.setDefaultChain(parseInt(newChainId, 16).toString());\n        return null as any;\n      }\n      case \"eth_chainId\":\n        return this.getDefaultChainId() as any;\n      default:\n        break;\n    }\n    if (this.namespace.methods.includes(args.request.method)) {\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = parseInt(chainId);\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n  // ---------- Private ----------------------------------------------- //\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private getDefaultChainId(): number {\n    if (this.chainId) return this.chainId;\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return parseInt(chainId.split(\":\")[1]);\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n}\n\nexport default Eip155Provider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { IProvider, Namespace, RequestParams, RpcProvidersMap, SubProviderOpts } from \"../types\";\nimport { getRpcUrl } from \"../utils\";\n\nclass SolanaProvider implements IProvider {\n  public name = \"solana\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: Namespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChainId();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getDefaultChainId(): string {\n    if (this.chainId) return this.chainId;\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default SolanaProvider;\n","export const LOGGER = \"error\";\n\nexport const RELAY_URL = \"wss://relay.walletconnect.com\";\n\nexport const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"universal_provider\";\n\nexport const STORAGE = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\n","import pino from \"pino\";\nimport SignClient from \"@walletconnect/sign-client\";\nimport { ProviderAccounts } from \"eip1193-provider\";\nimport { SessionTypes } from \"@walletconnect/types\";\nimport { getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport { getDefaultLoggerOptions, Logger } from \"@walletconnect/logger\";\nimport Eip155Provider from \"./providers/eip155\";\nimport SolanaProvider from \"./providers/solana\";\nimport { getChainFromNamespaces } from \"./utils\";\nimport {\n  IUniversalProvider,\n  IProvider,\n  RpcProviderMap,\n  ConnectParams,\n  RequestArguments,\n  UniversalProviderOpts,\n  NamespaceConfig,\n} from \"./types\";\n\nimport { RELAY_URL, LOGGER, STORAGE } from \"./constants\";\nimport EventEmitter from \"events\";\n\nexport class UniversalProvider implements IUniversalProvider {\n  public client!: SignClient;\n  public namespaces!: NamespaceConfig;\n  public events: EventEmitter = new EventEmitter();\n  public rpcProviders: RpcProviderMap = {};\n  public session!: SessionTypes.Struct;\n  public providerOpts: UniversalProviderOpts;\n  public logger: Logger;\n  public uri: string | undefined;\n\n  static async init(opts: UniversalProviderOpts) {\n    const provider = new UniversalProvider(opts);\n    await provider.initialize();\n    return provider;\n  }\n\n  constructor(opts: UniversalProviderOpts) {\n    this.providerOpts = opts;\n    this.logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || LOGGER }));\n  }\n\n  public async request<T = unknown>(\n    args: RequestArguments,\n    chain?: string | undefined,\n  ): Promise<T> {\n    const [namespace, chainId] = this.validateChain(chain);\n\n    return await this.getProvider(namespace).request({\n      request: {\n        ...args,\n      },\n      chainId: `${namespace}:${chainId}`,\n      topic: this.session?.topic,\n    });\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: any) => void,\n    chain?: string | undefined,\n  ): void {\n    this.request(args, chain)\n      .then((response) => callback(null, response))\n      .catch((error) => callback(error, undefined));\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    const accounts = await this.request({ method: \"eth_requestAccounts\", params: [] });\n    return accounts as ProviderAccounts;\n  }\n\n  public async disconnect(): Promise<void> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    await this.client.disconnect({\n      topic: this.session.topic,\n      reason: getSdkError(\"USER_DISCONNECTED\"),\n    });\n  }\n\n  public async connect(opts: ConnectParams): Promise<SessionTypes.Struct | undefined> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    this.setNamespaces(opts.namespaces);\n    this.createProviders();\n    await this.cleanupPendingPairings();\n    return opts.skipPairing === true ? undefined : await this.pair(opts.pairingTopic);\n  }\n\n  public on(event: any, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  public async pair(pairingTopic: string | undefined): Promise<SessionTypes.Struct> {\n    const { uri, approval } = await this.client.connect({\n      pairingTopic,\n      requiredNamespaces: this.namespaces,\n    });\n\n    if (uri) {\n      this.uri = uri;\n      this.events.emit(\"display_uri\", uri);\n    }\n\n    this.session = await approval();\n    this.onSessionUpdate();\n    return this.session;\n  }\n\n  public setDefaultChain(chain: string, rpcUrl?: string | undefined) {\n    try {\n      const [namespace, chainId] = this.validateChain(chain);\n      this.getProvider(namespace).setDefaultChain(chainId, rpcUrl);\n    } catch (error) {\n      // ignore the error if the fx is used prematurely before namespaces are set\n      if (!/Please call connect/.test((error as Error).message)) throw error;\n    }\n  }\n\n  public async cleanupPendingPairings(): Promise<void> {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const inactivePairings = this.client.pairing.getAll({ active: false });\n\n    if (!isValidArray(inactivePairings)) return;\n    await Promise.all([\n      inactivePairings.map((pairing) =>\n        this.client.pairing.delete(pairing.topic, getSdkError(\"USER_DISCONNECTED\")),\n      ),\n      inactivePairings.map((pairing) => this.client.core.relayer.unsubscribe(pairing.topic)),\n      inactivePairings.map((pairing) => this.client.core.expirer.del(pairing.topic)),\n    ]);\n\n    this.logger.info(`Inactive pairings cleared: ${inactivePairings.length}`);\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async checkStorage() {\n    this.namespaces =\n      ((await this.client.core.storage.getItem(`${STORAGE}/namespaces`)) as NamespaceConfig) || {};\n    if (this.namespaces) {\n      this.createProviders();\n    }\n\n    if (this.client.session.length) {\n      const lastKeyIndex = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[lastKeyIndex]);\n      this.onSessionUpdate();\n    }\n  }\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    await this.createClient();\n    this.checkStorage();\n    this.registerEventListeners();\n  }\n\n  private async createClient() {\n    this.client =\n      this.providerOpts.client ||\n      (await SignClient.init({\n        logger: this.providerOpts.logger || LOGGER,\n        relayUrl: this.providerOpts.relayUrl || RELAY_URL,\n        projectId: this.providerOpts.projectId,\n        metadata: this.providerOpts.metadata, // fetch metadata automatically if not provided?\n        storageOptions: this.providerOpts.storageOptions,\n        name: this.providerOpts.name,\n      }));\n\n    this.logger.trace(`SignClient Initialized`);\n  }\n\n  private createProviders(): void {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    Object.keys(this.namespaces).forEach((namespace) => {\n      switch (namespace) {\n        case \"eip155\":\n          this.rpcProviders[namespace] = new Eip155Provider({\n            client: this.client,\n            namespace: this.namespaces[namespace],\n            events: this.events,\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[namespace] = new SolanaProvider({\n            client: this.client,\n            namespace: this.namespaces[namespace],\n            events: this.events,\n          });\n          break;\n        case \"cosmos\":\n          //TODO:\n          break;\n        case \"polkadot\":\n          //TODO:\n          break;\n      }\n    });\n  }\n\n  private registerEventListeners(): void {\n    if (typeof this.client === \"undefined\") {\n      throw new Error(\"Sign Client is not initialized\");\n    }\n\n    this.client.on(\"session_ping\", (args) => {\n      this.events.emit(\"session_ping\", args);\n    });\n\n    this.client.on(\"session_event\", (args) => {\n      this.events.emit(\"session_event\", args);\n    });\n\n    this.client.on(\"session_update\", ({ topic, params }) => {\n      const { namespaces } = params;\n      const _session = this.client?.session.get(topic);\n      this.session = { ..._session, namespaces } as SessionTypes.Struct;\n      this.onSessionUpdate();\n      this.events.emit(\"session_update\", { topic, params });\n    });\n\n    this.client.on(\"session_delete\", () => {\n      this.events.emit(\"session_delete\");\n    });\n  }\n\n  private getProvider(namespace: string): IProvider {\n    if (!this.rpcProviders[namespace]) {\n      throw new Error(`Provider not found: ${namespace}`);\n    }\n    return this.rpcProviders[namespace];\n  }\n\n  private onSessionUpdate(): void {\n    Object.keys(this.rpcProviders).forEach((namespace: string) =>\n      this.getProvider(namespace).updateNamespace(this.session.namespaces[namespace]),\n    );\n  }\n\n  private setNamespaces(namespaces: NamespaceConfig): void {\n    if (!namespaces || !Object.keys(namespaces).length) {\n      throw new Error(\"Namespaces must be not empty\");\n    }\n    this.client.core.storage.setItem(`${STORAGE}/namespaces`, namespaces);\n    this.namespaces = namespaces;\n  }\n\n  private validateChain(chain?: string): [string, string] {\n    const [namespace, chainId] = chain?.split(\":\") || [\"\", \"\"];\n\n    // validate namespace\n    if (namespace) {\n      if (!Object.keys(this.namespaces).includes(namespace)) {\n        throw new Error(\n          `Namespace '${namespace}' is not configured. Please call connect() first with namespace config.`,\n        );\n      }\n    }\n\n    return !namespace || !chainId ? getChainFromNamespaces(this.namespaces) : [namespace, chainId];\n  }\n}\nexport default UniversalProvider;\n","import { UniversalProvider as Provider } from \"./UniversalProvider\";\nexport * from \"./types\";\nexport const UniversalProvider = Provider;\nexport default Provider;\n"],"names":["namespaces","_a","chain","chainId","rpc","rpcUrl","chains","Eip155Provider","opts","args","newChainId","namespace","getRpcUrl","JsonRpcProvider","HttpConnection","http","accounts","account","SolanaProvider","UniversalProvider","EventEmitter","pino","getDefaultLoggerOptions","LOGGER","provider","__spreadValues","callback","response","error","getSdkError","event","listener","pairingTopic","uri","approval","inactivePairings","isValidArray","pairing","STORAGE","lastKeyIndex","SignClient","RELAY_URL","topic","params","_session","__spreadProps","getChainFromNamespaces","Provider"],"mappings":"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"}